basePath: /
consumes:
- application/json
definitions:
  controller.GetManyHostsResponseSchema:
    properties:
      data:
        items:
          $ref: '#/definitions/utility.HostMachineGetResponseBodySchema'
        type: array
      meta:
        $ref: '#/definitions/utility.MetaSchema'
    required:
    - data
    - meta
    type: object
  controller.GetManyIncidentsResponseSchema:
    properties:
      data:
        items:
          $ref: '#/definitions/utility.IncidentGetResponseBodySchema'
        type: array
      meta:
        $ref: '#/definitions/utility.MetaSchema'
    required:
    - data
    - meta
    type: object
  controller.GetManyProvidersResponseSchema:
    properties:
      data:
        items:
          $ref: '#/definitions/utility.ProviderGetResponseSchema'
        type: array
      meta:
        $ref: '#/definitions/utility.MetaSchema'
    required:
    - data
    - meta
    type: object
  controller.GetManyTeamsResponseSchema:
    properties:
      data:
        items:
          $ref: '#/definitions/utility.TeamGetResponseBodySchema'
        type: array
      meta:
        $ref: '#/definitions/utility.MetaSchema'
    required:
    - data
    - meta
    type: object
  utility.ErrorResponseSchema:
    properties:
      error:
        type: string
    required:
    - error
    type: object
  utility.HostMachineGetResponseBodySchema:
    properties:
      hostname:
        type: string
      ip4:
        type: string
      ip6:
        type: string
      os:
        enum:
        - Windows
        - Linux
        - MacOS
        type: string
      team:
        $ref: '#/definitions/utility.TeamGetResponseBodySchema'
      uuid:
        type: string
    required:
    - hostname
    - os
    - team
    - uuid
    type: object
  utility.HostMachinePostPutRequestBodySchema:
    properties:
      hostname:
        maxLength: 40
        type: string
      ip4:
        type: string
      ip6:
        type: string
      os:
        enum:
        - Windows
        - Linux
        - MacOS
        type: string
      teamID:
        type: string
    required:
    - hostname
    - os
    - teamID
    type: object
  utility.IncidentCommentGetResponseBodySchema:
    properties:
      comment:
        maxLength: 200
        type: string
      commentedAt:
        type: string
      commentedBy:
        $ref: '#/definitions/utility.UserGetResponseBodySchema'
      uuid:
        type: string
    required:
    - comment
    - commentedAt
    - commentedBy
    - uuid
    type: object
  utility.IncidentCommentPostRequestBodySchema:
    properties:
      comment:
        maxLength: 200
        type: string
    required:
    - comment
    type: object
  utility.IncidentGetResponseBodySchema:
    properties:
      comments:
        items:
          $ref: '#/definitions/utility.IncidentCommentGetResponseBodySchema'
        type: array
      createdAt:
        type: string
      description:
        maxLength: 500
        type: string
      hostsAffected:
        items:
          $ref: '#/definitions/utility.HostMachineGetResponseBodySchema'
        type: array
      resolutionTeams:
        items:
          $ref: '#/definitions/utility.TeamGetResponseBodySchema'
        type: array
      resolvedAt:
        type: string
      resolvedBy:
        $ref: '#/definitions/utility.UserGetResponseBodySchema'
      summary:
        maxLength: 100
        type: string
      uuid:
        type: string
    required:
    - comments
    - createdAt
    - description
    - hostsAffected
    - resolutionTeams
    - resolvedAt
    - resolvedBy
    - summary
    - uuid
    type: object
  utility.IncidentPutRequestBodySchema:
    properties:
      description:
        maxLength: 500
        minLength: 1
        type: string
      hostsAffected:
        items:
          type: string
        type: array
      resolutionTeams:
        items:
          type: string
        type: array
      resolved:
        type: boolean
      summary:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - description
    - hostsAffected
    - resolutionTeams
    - resolved
    - summary
    type: object
  utility.KeyValueSchema:
    properties:
      key:
        maxLength: 20
        type: string
      required:
        type: boolean
      type:
        type: string
      value:
        maxLength: 30
        type: string
    required:
    - key
    - required
    - type
    - value
    type: object
  utility.MetaSchema:
    properties:
      page:
        type: integer
      pageSize:
        type: integer
      pages:
        type: integer
      total:
        type: integer
    required:
    - page
    - pageSize
    - pages
    - total
    type: object
  utility.ProviderGetResponseSchema:
    properties:
      fields:
        items:
          $ref: '#/definitions/utility.KeyValueSchema'
        type: array
      name:
        maxLength: 30
        type: string
      type:
        type: string
      uuid:
        type: string
    required:
    - fields
    - name
    - type
    - uuid
    type: object
  utility.TeamGetResponseBodySchema:
    properties:
      name:
        maxLength: 30
        type: string
      uuid:
        type: string
    required:
    - name
    - uuid
    type: object
  utility.UserGetResponseBodySchema:
    properties:
      admin:
        type: boolean
      email:
        maxLength: 30
        type: string
      name:
        maxLength: 30
        type: string
      slackID:
        maxLength: 30
        type: string
      teams:
        items:
          $ref: '#/definitions/utility.TeamGetResponseBodySchema'
        type: array
      uuid:
        type: string
    required:
    - admin
    - email
    - name
    - slackID
    - teams
    - uuid
    type: object
  utility.UserLoginRequestBodySchema:
    properties:
      email:
        maxLength: 30
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  utility.UserPostRequestBodySchema:
    properties:
      email:
        maxLength: 30
        type: string
      name:
        maxLength: 30
        type: string
      password:
        type: string
      teams:
        items:
          type: string
        type: array
    required:
    - email
    - name
    - password
    - teams
    type: object
host: localhost:5000
info:
  contact: {}
  title: A.I.M.S Swagger
  version: "1.0"
paths:
  /authorise/slack:
    get:
      consumes:
      - application/json
      description: Redirect to Slack auth login
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Redirect to Slack auth login
      tags:
      - Third-Party Auth
  /authorise/slack/callback:
    get:
      consumes:
      - application/json
      description: Link Slack to user
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Link Slack to user
      tags:
      - Third-Party Auth
  /hosts:
    get:
      consumes:
      - application/json
      description: Get a list of Hosts
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.GetManyHostsResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Get a list of Hosts
      tags:
      - Hosts
    post:
      consumes:
      - application/json
      description: Create a Host
      parameters:
      - description: Host creation request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/utility.HostMachinePostPutRequestBodySchema'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Create a Host
      tags:
      - Hosts
  /hosts/{host_id}:
    delete:
      consumes:
      - application/json
      description: Delete a Host
      parameters:
      - description: Host UUID
        in: path
        name: host_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Delete a Host
      tags:
      - Hosts
    get:
      consumes:
      - application/json
      description: Get a Host
      parameters:
      - description: Host UUID
        in: path
        name: host_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utility.HostMachineGetResponseBodySchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Get a Host
      tags:
      - Hosts
    put:
      consumes:
      - application/json
      description: Update a Host
      parameters:
      - description: Host UUID
        in: path
        name: host_id
        required: true
        type: string
      - description: Host update request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/utility.HostMachinePostPutRequestBodySchema'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Update a Host
      tags:
      - Hosts
  /incidents:
    get:
      description: Get a list of incidents
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: pageSize
        type: integer
      - description: Filter by resolved status
        in: query
        name: resolved
        type: boolean
      - description: Filter by my team
        in: query
        name: myTeams
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.GetManyIncidentsResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Get a list of incidents
      tags:
      - Incidents
    post:
      consumes:
      - application/json
      description: Create an incident
      produces:
      - application/json
      responses:
        "201":
          description: Created
      security:
      - JWT: []
      summary: Create an incident
      tags:
      - Incidents
  /incidents/{incident_id}:
    get:
      description: Get an incident
      parameters:
      - description: Incident UUID
        in: path
        name: incident_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utility.IncidentGetResponseBodySchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Get an incident
      tags:
      - Incidents
    put:
      consumes:
      - application/json
      description: Update an incident
      parameters:
      - description: The request body
        in: body
        name: incident
        required: true
        schema:
          $ref: '#/definitions/utility.IncidentPutRequestBodySchema'
      - description: Incident UUID
        in: path
        name: incident_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Update an incident
      tags:
      - Incidents
  /incidents/{incident_id}/comments:
    post:
      consumes:
      - application/json
      description: Create an incident comment
      parameters:
      - description: The request body
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/utility.IncidentCommentPostRequestBodySchema'
      - description: Incident UUID
        in: path
        name: incident_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Create an incident comment
      tags:
      - Incidents
  /incidents/{incident_id}/comments/{comment_id}:
    delete:
      description: Delete an incident comment
      parameters:
      - description: Comment UUID
        in: path
        name: comment_id
        required: true
        type: string
      - description: Incident UUID
        in: path
        name: incident_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Delete an incident comment
      tags:
      - Incidents
  /me:
    get:
      consumes:
      - application/json
      description: Get basic details about the currently logged in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utility.UserGetResponseBodySchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Get basic details about the currently logged in user
      tags:
      - Users
  /providers:
    get:
      consumes:
      - application/json
      description: Get a list of Providers
      parameters:
      - description: The type of provider
        enum:
        - log
        - alert
        in: query
        name: provider_type
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.GetManyProvidersResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Get a list of Providers
      tags:
      - Settings
    post:
      consumes:
      - application/json
      description: Create a provider
      parameters:
      - description: The type of provider
        enum:
        - log
        - alert
        in: query
        name: provider_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Create a provider
      tags:
      - Settings
  /providers/{provider_id}:
    delete:
      consumes:
      - application/json
      description: Delete a provider
      parameters:
      - description: Provider ID
        format: uuid
        in: path
        name: provider_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Delete a provider
      tags:
      - Settings
    get:
      consumes:
      - application/json
      description: Get a provider
      parameters:
      - description: Provider ID
        format: uuid
        in: path
        name: provider_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utility.ProviderGetResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Get a provider
      tags:
      - Settings
    put:
      consumes:
      - application/json
      description: Update a provider
      parameters:
      - description: Provider ID
        format: uuid
        in: path
        name: provider_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Update a provider
      tags:
      - Settings
  /teams:
    get:
      consumes:
      - application/json
      description: Get a list of Teams
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.GetManyTeamsResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Get a list of Teams
      tags:
      - Teams
    post:
      consumes:
      - application/json
      description: Create a Team
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Create a Team
      tags:
      - Teams
  /teams/{team_id}:
    delete:
      consumes:
      - application/json
      description: Delete a Team
      parameters:
      - description: Team ID
        format: uuid
        in: path
        name: team_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      security:
      - JWT: []
      summary: Delete a Team
      tags:
      - Teams
  /users:
    post:
      consumes:
      - application/json
      description: Create a user
      parameters:
      - description: The request body
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/utility.UserPostRequestBodySchema'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: GET URL of the created User
              type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      summary: Create a user
      tags:
      - Users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login as a user
      parameters:
      - description: Request Body
        in: body
        name: request_body
        required: true
        schema:
          $ref: '#/definitions/utility.UserLoginRequestBodySchema'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponseSchema'
      summary: Login as a user
      tags:
      - Users
produces:
- application/json
schemes:
- https
securityDefinitions:
  JWT:
    description: The JWT
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
